{
  "_args": [
    [
      "fb@git+https://github.com/Benyaminov-d/facebook-node-sdk.git",
      "C:\\@"
    ]
  ],
  "_from": "git+https://github.com/Benyaminov-d/facebook-node-sdk.git",
  "_id": "fb@0.7.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/fb",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/Benyaminov-d/facebook-node-sdk/master/package.json",
      "gitUrl": "git://github.com/Benyaminov-d/facebook-node-sdk.git",
      "httpsUrl": "git+https://github.com/Benyaminov-d/facebook-node-sdk.git",
      "shortcut": "github:Benyaminov-d/facebook-node-sdk",
      "ssh": "git@github.com:Benyaminov-d/facebook-node-sdk.git",
      "sshUrl": "git+ssh://git@github.com/Benyaminov-d/facebook-node-sdk.git",
      "type": "github"
    },
    "name": "fb",
    "raw": "fb@git+https://github.com/Benyaminov-d/facebook-node-sdk.git",
    "rawSpec": "git+https://github.com/Benyaminov-d/facebook-node-sdk.git",
    "scope": null,
    "spec": "git+https://github.com/Benyaminov-d/facebook-node-sdk.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/Benyaminov-d/facebook-node-sdk.git#75d868dbcff873f3b9520f35e36e09e447cd4e8b",
  "_shasum": "d9dd098f81c86c2657f5208b8424bb67078269c4",
  "_shrinkwrap": null,
  "_spec": "fb@git+https://github.com/Benyaminov-d/facebook-node-sdk.git",
  "_where": "C:\\@",
  "author": {
    "email": "pshrestha@thuzi.com",
    "name": "Thuzi LLC",
    "url": "https://github.com/Thuzi"
  },
  "bugs": {
    "url": "https://github.com/Thuzi/facebook-node-sdk/issues"
  },
  "dependencies": {
    "crypto": "0.0.3",
    "request": "2.9.x"
  },
  "description": "NodeJS Library for Facebook",
  "devDependencies": {
    "mocha": "~1.9.0",
    "nock": "~0.17.2",
    "should": "~1.2.2"
  },
  "engines": {
    "node": ">=0.6.9"
  },
  "gitHead": "75d868dbcff873f3b9520f35e36e09e447cd4e8b",
  "homepage": "https://github.com/Thuzi/facebook-node-sdk",
  "keywords": [
    "facebook",
    "fb",
    "graph"
  ],
  "main": "./fb.js",
  "name": "fb",
  "optionalDependencies": {},
  "readme": "# NodeJS Library for Facebook [![Build Status](https://travis-ci.org/Thuzi/facebook-node-sdk.png?branch=master,dev,azure)](https://travis-ci.org/Thuzi/facebook-node-sdk.png?branch=master,dev,azure)\r\n\r\nWith facebook-node-sdk you can now easily write the same code and share between your server (nodejs) and the client ([Facebook Javascript SDK](https://developers.facebook.com/docs/reference/javascript/)).\r\n\r\nThis SDK will report usage of which AppID is using it directly to Facebook.\r\n\r\n**Author:** [Thuzi](http://www.thuzi.com)\r\n\r\n**License:** Apache v2\r\n\r\n# Installing facebook-node-sdk\r\n\r\n```\r\nnpm install fb\r\n```\r\n\r\n```javascript\r\nvar FB = require('fb');\r\n```\r\n\r\n# Running Samples\r\nUpdate `appId` and `appSecret` in `samples/scrumptious/config.js`\r\n\r\n```\r\nnpm install\r\ncd samples/scrumptious\r\nnpm install\r\nnode app.js\r\n```\r\n\r\n## Graph Api\r\n\r\n### Get\r\n\r\n```js\r\nvar FB = require('fb');\r\n\r\nFB.api('4', function (res) {\r\n  if(!res || res.error) {\r\n   console.log(!res ? 'error occurred' : res.error);\r\n   return;\r\n  }\r\n  console.log(res.id);\r\n  console.log(res.name);\r\n});\r\n```\r\n\r\n__Passing Parameters__\r\n\r\n```js\r\nvar FB = require('fb');\r\n\r\nFB.api('4', { fields: ['id', 'name'] }, function (res) {\r\n  if(!res || res.error) {\r\n    console.log(!res ? 'error occurred' : res.error);\r\n    return;\r\n  }\r\n  console.log(res.id);\r\n  console.log(res.name);\r\n});\r\n```\r\n\r\n### Post\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nvar body = 'My first post using facebook-node-sdk';\r\nFB.api('me/feed', 'post', { message: body}, function (res) {\r\n  if(!res || res.error) {\r\n    console.log(!res ? 'error occurred' : res.error);\r\n    return;\r\n  }\r\n  console.log('Post Id: ' + res.id);\r\n});\r\n```\r\n\r\n### Delete\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nvar postId = '1234567890';\r\nFB.api(postId, 'delete', function (res) {\r\n  if(!res || res.error) {\r\n    console.log(!res ? 'error occurred' : res.error);\r\n    return;\r\n  }\r\n  console.log('Post was deleted');\r\n});\r\n```\r\n\r\n## Facebook Query Language (FQL)\r\n\r\n### Query\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nFB.api('fql', { q: 'SELECT uid FROM user WHERE uid=me()' }, function (res) {\r\n  if(!res || res.error) {\r\n    console.log(!res ? 'error occurred' : res.error);\r\n    return;\r\n  }\r\n  console.log(res.data);\r\n});\r\n```\r\n\r\n### Multi-query\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nFB.api('fql', { q: [\r\n  'SELECT uid FROM user WHERE uid=me()',\r\n  'SELECT name FROM user WHERE uid=me()'\r\n] }, function(res) {\r\n  if(!res || res.error) {\r\n    console.log(!res ? 'error occurred' : res.error);\r\n    return;\r\n  }\r\n  console.log(res.data[0].fql_result_set);\r\n  console.log(res.data[1].fql_result_set);\r\n});\r\n```\r\n\r\n### Named Multi-query\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nFB.api('fql', { q : {\r\n  id: 'SELECT uid FROM user WHERE uid=me()',\r\n  name: 'SELECT name FROM user WHERE uid IN (SELECT uid FROM #id)'\r\n} }, function(res) {\r\n  if(!res || res.error) {\r\n    console.log(!res ? 'error occurred' : res.error);\r\n    return;\r\n  }\r\n  console.log(res.data[0].fql_result_set);\r\n  console.log(res.data[1].fql_result_set);\r\n});\r\n```\r\n\r\n## Batch Requests\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nvar extractEtag;\r\nFB.api('', 'post', { \r\n    batch: [\r\n        { method: 'get', relative_url: '4' },\r\n        { method: 'get', relative_url: 'me/friends?limit=50' },\r\n        { method: 'get', relative_url: 'fql?q=' + encodeURIComponent('SELECT uid FROM user WHERE uid=me()' ) }, /* fql */\r\n        { method: 'get', relative_url: 'fql?q=' + encodeURIComponent(JSON.stringify([\r\n                    'SELECT uid FROM user WHERE uid=me()',\r\n                    'SELECT name FROM user WHERE uid=me()'\r\n                ])) }, /* fql multi-query */\r\n        { method: 'get', relative_url: 'fql?q=' + encodeURIComponent(JSON.stringify({\r\n                    id: 'SELECT uid FROM user WHERE uid=me()',\r\n                    name: 'SELECT name FROM user WHERE uid IN (SELECT uid FROM #id)'\r\n                })) }, /* named fql multi-query */\r\n        { method: 'get', relative_url: '4', headers: { 'If-None-Match': '\"7de572574f2a822b65ecd9eb8acef8f476e983e1\"' } }, /* etags */\r\n        { method: 'get', relative_url: 'me/friends?limit=1', name: 'one-friend' /* , omit_response_on_success: false */ },\r\n        { method: 'get', relative_url: '{result=one-friend:$.data.0.id}/feed?limit=5'}\r\n    ]\r\n}, function(res) {\r\n    var res0, res1, res2, res3, res4, res5, res6, res7,\r\n        etag1;\r\n\r\n    if(!res || res.error) {\r\n        console.log(!res ? 'error occurred' : res.error);\r\n        return;\r\n    }\r\n\r\n    res0 = JSON.parse(res[0].body);\r\n    res1 = JSON.parse(res[1].body);\r\n    res2 = JSON.parse(res[2].body);\r\n    res3 = JSON.parse(res[3].body);\r\n    res4 = JSON.parse(res[4].body);\r\n    res5 = res[5].code === 304 ? undefined : JSON.parse(res[5].body);   // special case for not-modified responses\r\n                                                                        // set res5 as undefined if response wasn't modified.\r\n    res6 = res[6] === null ? null : JSON.parse(res[6].body);\r\n    res7 = res6 === null ? JSON.parse(res[7].body) : undefined; // set result as undefined if previous dependency failed\r\n\r\n    if(res0.error) {\r\n        console.log(res0.error);\r\n    } else {\r\n        console.log('Hi ' + res0.name);\r\n        etag1 = extractETag(res[0]); // use this etag when making the second request.\r\n        console.log(etag1);\r\n    }\r\n\r\n    if(res1.error) {\r\n        console.log(res1.error);\r\n    } else {\r\n        console.log(res1);\r\n    }\r\n\r\n    if(res2.error) {\r\n        console.log(res2.error);\r\n    } else {\r\n        console.log(res2.data);\r\n    }\r\n\r\n    if(res3.error) {\r\n        console.log(res3.error);\r\n    } else {\r\n        console.log(res3.data[0].fql_result_set);\r\n        console.log(res3.data[1].fql_result_set);\r\n    }\r\n\r\n    if(res4.error) {\r\n        console.log(res4.error);\r\n    } else {\r\n        console.log(res4.data[0].fql_result_set);\r\n        console.log(res4.data[0].fql_result_set);\r\n    }\r\n\r\n    // check if there are any new updates\r\n    if(typeof res5 !== \"undefined\") {\r\n        // make sure there was no error\r\n        if(res5.error) {\r\n            console.log(error);\r\n        } else {\r\n            console.log('new update available');\r\n            console.log(res5);\r\n        }\r\n    }\r\n    else {\r\n        console.log('no updates');\r\n    }\r\n\r\n    // check if dependency executed successfully    \r\n    if(res[6] === null) {\r\n        // then check if the result it self doesn't have any errors.\r\n        if(res7.error) {\r\n            console.log(res7.error);\r\n        } else {\r\n            console.log(res7);\r\n        }\r\n    } else {\r\n        console.log(res6.error);\r\n    }\r\n});\r\n\r\nextractETag = function(res) {\r\n    var etag, header, headerIndex;\r\n    for(headerIndex in res.headers) {\r\n        header = res.headers[headerIndex];\r\n        if(header.name === 'ETag') {\r\n            etag = header.value;\r\n        }\r\n    }\r\n    return etag;\r\n};\r\n```\r\n### Post\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nvar message = 'Hi from facebook-node-js';\r\nFB.api('', 'post', {\r\n    batch: [\r\n        { method: 'post', relative_url: 'me/feed', body:'message=' + encodeURIComponent(message) }\r\n    ]\r\n}, function (res) {\r\n    var res0;\r\n\r\n    if(!res || res.error) {\r\n        console.log(!res ? 'error occurred' : res.error);\r\n        return;\r\n    }\r\n\r\n    res0 = JSON.parse(res[0].body);\r\n\r\n    if(res0.error) {\r\n        console.log(res0.error);\r\n    } else {\r\n        console.log('Post Id: ' + res0.id);\r\n    }\r\n});\r\n```\r\n\r\n## OAuth Requests\r\n\r\n*This is a non-standard behavior and does not work in the official client side FB JS SDK.*\r\n\r\nfacebook-node-sdk is capable of handling oauth requests which return non-json responses. You can use it by calling `api` method.\r\n\r\n### Get facebook application access token\r\n\r\n```javascript\r\nvar FB = require('fb');\r\n\r\nFB.api('oauth/access_token', {\r\n    client_id: 'app_id',\r\n    client_secret: 'app_secret',\r\n    grant_type: 'client_credentials'\r\n}, function (res) {\r\n    if(!res || res.error) {\r\n        console.log(!res ? 'error occurred' : res.error);\r\n        return;\r\n    }\r\n    \r\n    var accessToken = res.access_token;\r\n});\r\n```\r\n\r\n### Exchange code for access token\r\n\r\n```javascript\r\nvar FB = require('fb');\r\n\r\nFB.api('oauth/access_token', {\r\n    client_id: 'app_id',\r\n    client_secret: 'app_secret',\r\n    redirect_uri: 'http://yoururl.com/callback',\r\n    code: 'code'\r\n}, function (res) {\r\n    if(!res || res.error) {\r\n        console.log(!res ? 'error occurred' : res.error);\r\n        return;\r\n    }\r\n\r\n    var accessToken = res.access_token;\r\n    var expires = res.expires ? res.expires : 0;\r\n});\r\n```\r\n\r\nYou can safely extract the code from the url using the `url` module. Always make sure to handle invalid oauth callback as\r\nwell as error.\r\n\r\n```javascript\r\nvar url = require('url');\r\nvar FB = require('fb');\r\n\r\nvar urlToParse = 'http://yoururl.com/callback?code=.....#_=_';\r\nvar result = url.parse(urlToParse, true);\r\nif(result.query.error) {\r\n    if(result.query.error_description) {\r\n        console.log(result.query.error_description);\r\n    } else {\r\n        console.log(result.query.error);\r\n    }\r\n    return;\r\n} else if (!result.query.code) {\r\n    console.log('not a oauth callback');\r\n    return;\r\n}\r\n\r\nvar code = result.query.code;\r\n```\r\n\r\n### Extend expiry time of the access token\r\n\r\n```javascript\r\nvar FB = require('fb');\r\n\r\nFB.api('oauth/access_token', {\r\n    client_id: 'client_id',\r\n    client_secret: 'client_secret',\r\n    grant_type: 'fb_exchange_token',\r\n    fb_exchange_token: 'existing_access_token'\r\n}, function (res) {\r\n    if(!res || res.error) {\r\n        console.log(!res ? 'error occurred' : res.error);\r\n        return;\r\n    }\r\n    \r\n    var accessToken = res.access_token;\r\n    var expires = res.expires ? res.expires : 0;\r\n});\r\n```\r\n\r\n## Legacy REST Api\r\n\r\n__Although Legacy REST Api is supported by facebook-node-sdk, it is highly discouraged to be used, as Facebook is in the process of deprecating the Legacy REST Api.__\r\n\r\n### Get\r\n\r\n```javascript\r\nvar FB = require('fb');\r\n\r\nFB.api({ method: 'users.getInfo', uids: ['4'], fields: ['uid', 'name'] }, function (res) {\r\n    if(!res || res.error_msg) {\r\n        console.log(!res ? 'error occurred' : res.error_msg);\r\n        return;\r\n    }\r\n\r\n    console.log('User Id: ' + res[0].uid);\r\n    console.log('Name: ' + res[0].name);\r\n});\r\n```\r\n\r\n### Post\r\n\r\n```javascript\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nvar message = 'Hi from facebook-node-sdk';\r\nFB.api({ method: 'stream.publish', message: message }, function (res) {\r\n    if(!res || res.error_msg) {\r\n        console.log(!res ? 'error occurred' : res.error_msg);\r\n        return;\r\n    }\r\n    \r\n    console.log(res);\r\n});\r\n```\r\n### Delete\r\n\r\n```javascript\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n\r\nvar postId = '.....';\r\nFB.api({ method: 'stream.remove', post_id: postId }, function (res) {\r\n    if(!res || res.error_msg) {\r\n        console.log(!res ? 'error occurred' : res.error_msg);\r\n        return;\r\n    }\r\n    \r\n    console.log(res);\r\n});\r\n```\r\n\r\n## Access Tokens\r\n\r\n### setAccessToken\r\n*This is a non-standard api and does not exist in the official client side FB JS SDK.*\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\n```\r\n\r\nIf you want to use the api compaitible with FB JS SDK, pass `access_token` as parameter.\r\n\r\n```js\r\nFB.api('me', { fields: ['id', 'name'], access_token: 'access_token' }, function (res) {\r\n    console.log(res);\r\n}\r\n```\r\n\r\n### getAccessToken\r\n*Unlike `setAccessToken` this is a standard api and exists in FB JS SDK.*\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.setAccessToken('access_token');\r\nvar accessToken = FB.getAccessToken();\r\n```\r\n\r\n### AppSecret Proof\r\nFor improved security, as soon as you provide an app secret and an access token, the\r\nlibrary automatically computes and adds the appsecret_proof parameter to your requests.\r\n\r\n## Configuration options\r\n\r\n### options\r\n\r\n*This is a non-standard api and does not exist in the official client side FB JS SDK.*\r\n\r\nWhen this method is called with no parameters it will return all of the current options.\r\n\r\n```js\r\nvar FB = require('fb');\r\nvar options = FB.options();\r\n```\r\n\r\nWhen this method is called with a string it will return the value of the option if exists, null if it does not.\r\n\r\n```js\r\nvar timeout = FB.options('timeout');\r\n```\r\n\r\nWhen this method is called with an object it will merge the object onto the previous options object.\r\n```js\r\nFB.options({accessToken: 'abc'}); //equivalent to calling setAccessToken('abc')\r\nFB.options({timeout: 1000, accessToken: 'XYZ'}); //will set timeout and accessToken options\r\nvar timeout = FB.options('timeout'); //will get a timeout of 1000\r\nvar accessToken = FB.options('accessToken'); //will get the accessToken of 'XYZ'\r\n```\r\n\r\nThe existing options are:\r\n* `'accessToken'` string representing the facebook accessToken to be used for requests. This is the same option that is updated by the `setAccessToken` and `getAccessToken` methods.\r\n* `'appSecret'` string representing the facebook application secret.\r\n* `'proxy'` string representing an HTTP proxy to be used. Support proxy Auth with Basic Auth, embedding the auth info in the uri: 'http://[username:password@]proxy[:port]' (parameters in brackets are optional).\r\n* `'timeout'` integer number of milliseconds to wait for a response. Requests that have not received a response in *X* ms. If set to null or 0 no timeout will exist. On timeout an error object will be returned to the api callback with the error code of `'ETIMEDOUT'` (example below).\r\n\r\n`'scope'` and `'redirectUri'` have been whitelisted in options for convenience. These value will not be automatically\r\nadded when using any of the sdk apis unlike the above options. These are whitelisted so you can use it to pass values\r\nusing the same `FB` object.\r\n\r\n### version\r\n\r\n*This is a non-standard api and does not exist in the official client side FB JS SDK.*\r\n\r\nGets the string representation of the facebook-node-sdk library version.\r\n\r\n```js\r\nvar FB = require('fb');\r\nvar version = FB.version;\r\n```\r\n\r\n## Parsing Signed Request\r\n\r\n### parseSignedRequest\r\n\r\n*This is a non-standard api and does not exist in the official client side FB JS SDK.*\r\n\r\n```js\r\nvar FB = require('fb');\r\n\r\nvar signedRequestValue = 'signed_request_value';\r\nvar appSecret = 'app_secret';\r\n\r\nvar signedRequest  = FB.parseSignedRequest(signedRequestValue, appSecret);\r\nif(signedRequest) {\r\n    var accessToken = signedRequest.oauth_token;\r\n    var userId = signedRequest.user_id;\r\n    var userCountry = signedRequest.user.country;\r\n}\r\n```\r\n\r\n*Note: parseSignedRequest will return undefined if validation fails. Always remember to check the result of parseSignedRequest before accessing the result.*\r\n\r\nIf you already set the appSeceret in options, you can ignore the second parameter when calling parseSignedRequest. If you do pass the second parameter it will use the appSecret passed in parameter instead of using appSecret from options.\r\n\r\nIf appSecret is absent, parseSignedRequest will throw an error.\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.options({ 'appSecret': 'app_secret'});\r\n\r\nvar signedRequestValue = 'signed_request_value';\r\n\r\nvar signedRequest  = FB.parseSignedRequest(signedRequestValue);\r\nif(signedRequest) {\r\n    var accessToken = signedRequest.oauth_token;\r\n    var userId = signedRequest.user_id;\r\n    var userCountry = signedRequest.user.country;\r\n}\r\n```\r\n\r\n## Error handling\r\n\r\n*Note: facebook is not consistent with their error format, and different systems can fail causing different error formats*\r\n\r\nSome examples of various error codes you can check for:\r\n* `'ECONNRESET'` - connection reset by peer\r\n* `'ETIMEDOUT'` - connection timed out\r\n* `'ESOCKETTIMEDOUT'` - socket timed out\r\n* `'JSONPARSE'` - could not parse JSON response, happens when the FB API has availability issues. It sometimes returns HTML\r\n\r\n```js\r\nvar FB = require('fb');\r\nFB.options({timeout: 1, accessToken: 'access_token'});\r\n\r\nFB.api('/me', function (res) {\r\n    if(res && res.error) {\r\n        if(res.error.code === 'ETIMEDOUT') {\r\n            console.log('request timeout');\r\n        }\r\n        else {\r\n            console.log('error', res.error);\r\n        }\r\n    }\r\n    else {\r\n        console.log(res);\r\n    }\r\n});\r\n```\r\n\r\n## Node style callback with FB.napi\r\n\r\n*This is a non-standard api and does not exist in the official client side FB JS SDK.*\r\n\r\n`FB.napi` takes the same input as `FB.api`. Only the callback parameters is different. In the original \r\n`FB.api`, the callback expects one parameter which is the response. In `FB.napi` the callback expects two\r\nparameters instead of one and follows the node standards. The first parameter is an error which is always\r\nof type `FB.FacebookApiException` and the second parameter is the same response as in `FB.api`.\r\nError response can be accessed using `error.response` which is the same response as the response when using\r\n`FB.api`\r\n\r\n```js\r\nvar FB = require('fb');\r\n\r\nFB.napi('4', function(error, response) {\r\n    if(error) {\r\n        if(error.response.error.code === 'ETIMEDOUT') {\r\n            console.log('request timeout');\r\n        }\r\n        else {\r\n            console.log('error', error.message);\r\n        }\r\n    } else {\r\n        console.log(response);\r\n    }\r\n});\r\n```\r\n\r\n`FB.napi` was added especially to make it easier to work with async control flow libraries.\r\n\r\nHere are some examples of using facebook-node-sdk with [Step](https://npmjs.org/package/step).\r\n\r\nYou will need to install `step`.\r\n\r\n```fb\r\nnpm install step\r\n```\r\n\r\n### FB.api with Step\r\n\r\n```js\r\nvar FB      = require('fb'),\r\n    Step    = require('step');\r\n\r\nStep(\r\n    function getUser() {\r\n        var self = this;\r\n        FB.api('4', function(res) {\r\n            if(!res || res.error) {\r\n                self(new Error('Error occured'));\r\n            } else {\r\n                self(null, res);\r\n            }\r\n        });\r\n    },\r\n    function processResult(err, res) {\r\n        if(err) throw err;\r\n        console.log(res);\r\n    }\r\n);\r\n```\r\n\r\n### FB.napi with Step\r\n\r\nSimplified version of facebook-node-sdk async callbacks using `FB.napi`.\r\n\r\n```js\r\nvar FB      = require('fb'),\r\n    Step    = require('step');\r\n\r\nStep(\r\n    function getUser() {\r\n        FB.napi('4', this);\r\n    },\r\n    function processResult(err, res) {\r\n        if(err) throw err;\r\n        console.log(res);\r\n    }\r\n);\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Thuzi/facebook-node-sdk.git"
  },
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha --recursive --reporter spec",
    "testw": "node ./node_modules/mocha/bin/mocha --recursive --watch --reporter spec"
  },
  "version": "0.7.3"
}
